# Configurações específicas para Render.com Hobby Plan
spring.application.name=test

# Configuração do banco de dados PostgreSQL
# Render.com fornece DATABASE_URL automaticamente
# Se DATABASE_URL for fornecida, ela sobrescreverá as configurações individuais
# Suporta tanto postgresql:// quanto jdbc:postgresql:// automaticamente
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://${PGHOST:localhost}:${PGPORT:5432}/${PGDATABASE:local}}
spring.datasource.username=${PGUSER:scenario}
spring.datasource.password=${PGPASSWORD:scenario}

# Configurações extras do DataSource para Render.com
spring.datasource.driver-class-name=org.postgresql.Driver

# Configurações do Hibernate otimizadas para recursos limitados
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.batch_size=5
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Configurações de logging mínimas
logging.level.org.hibernate.SQL=WARN
logging.level.org.springframework.web=WARN
logging.level.org.springframework.security=WARN
logging.level.com.scenario.team.cloud=INFO
logging.level.root=INFO

# Configurações do servidor ultra otimizadas
server.port=${PORT:8080}
server.servlet.context-path=/
server.tomcat.max-threads=20
server.tomcat.min-spare-threads=5
server.tomcat.max-connections=500
server.tomcat.accept-count=10

# Configurações de segurança
server.error.include-stacktrace=never
server.error.include-message=never

# Spring Boot Actuator mínimo
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=never

# Pool de conexões ultra otimizado para hobby plan
spring.datasource.hikari.maximum-pool-size=2
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=120000
spring.datasource.hikari.max-lifetime=300000
spring.datasource.hikari.leak-detection-threshold=180000

# Configurações JVM específicas (aplicadas via JAVA_OPTS no Dockerfile)
# -Xmx256m -Xms128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200

# Desabilitar features não essenciais
spring.jpa.open-in-view=false
spring.main.lazy-initialization=true
